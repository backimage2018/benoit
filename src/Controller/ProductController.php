<?php/* Controlleur pour le panier avec les routes : -product_admin -products -delete -product-page -edit product -list -corbeille -search -stock  */namespace App\Controller;
use App\Entity\Image;
use App\Entity\Panier;
use App\Entity\Product;use App\Form\ProductType;use App\Service\FileUploader;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Config\Definition\Exception\Exception;use Symfony\Component\HttpFoundation\File\File;use RangeException;
use Doctrine\DBAL\Driver\PDOException;use App\Service\PanierService;use Symfony\Component\HttpFoundation\JsonResponse;
class ProductController extends Controller
{
    /**
     * @Route("/admin/product_admin", name="product_admin")
     */
    public function registerProduct(Request $request,FileUploader $fileUploader)
    {
               //variable commune           $param = [];        $param = constante::variable($param);        $param=constante::variableindex($param);                // 1) build the form
        $Product = new Product();        $Image = new Image();        
        $form = $this->createForm(ProductType::class, $Product);        $form->handleRequest($request);        //variable de la page        $param['form']=$form->createView();        $param['image']="";    if ($form->isSubmitted() && $form->isValid()){                    $file = $Product->getImage()->getlien();            $fileName = $fileUploader->upload($file);            $Image->setLien($fileName);            $Image->setProduct($Product);            $Product->setImage($Image);            $em = $this->getDoctrine()->getManager();            $em->persist($Product);            $em->flush();                  //variable de la page                                 return $this->redirectToRoute('product_admin');            }     
    return $this->render('admin\product_admin.html.twig',  $param);                      }        /**     * @return string     */    private function generateUniqueFileName()    {        // md5() reduces the similarity of the file names generated by        // uniqid(), which is based on timestamps        return md5(uniqid());    }            /**     * @Route("/products", name="products")     */        Public function recherche(PanierService $PanierService){        $iduser= $this->getUser();        $panier=$this-> getDoctrine()        ->getRepository(Panier::class)        ->findBy(array('user'=>$iduser));        $total=$PanierService->total($panier);        $article= $this-> getDoctrine()        ->getRepository(Product::class)        ->findAll();                        //variable commune        $param = [];        $param = constante::variable($param);        $param=constante::variableindex($param);        $param['panier']=$panier;        $param['total']=$total;        //variable pour la page        $param['article']=$article;              return $this->render('products.php.twig',$param);
}/** * @Route("/delete/{id}") */Public function deleted($id) {    $Product=$this-> getDoctrine()    ->getRepository(Product::class)    ->findOneBy(array('id' => $id));            $em = $this->getDoctrine()->getEntityManager();     try {   $em->remove($Product);    $em->flush();       }    catch (\Exception $e){        return $this->redirectToRoute('exception');    }    return $this->redirectToRoute('list');}/** * @Route("/product-page/{id}", name="product-page") */Public function rechercheid($id,PanierService $PanierService){     //requete pour un article (id)      $article= $this-> getDoctrine()    ->getRepository(Product::class)    ->findOneBy(array('id' => $id));         $iduser= $this->getUser();    $panier=$this-> getDoctrine()    ->getRepository(Panier::class)    ->findBy(array('user'=>$iduser));    $total=$PanierService->total($panier);        //variable commune    $param = [];    $param = constante::variable($param);    $param=constante::variableindex($param);    $param['panier']=$panier;    $param['total']=$total;            if ( is_null($article)){        return $this->redirectToRoute('exception');    }    else {    $review=$article->getreviews()->toArray();    }    $articles= $this-> getDoctrine()    ->getRepository(Product::class)    ->findAll();    if ( is_null($articles)){        return $this->redirectToRoute('exception');    }    //variable pour la page    $param['articlesdetail']=$article;    $param['commentaires']=$review;    $param['articles']=$articles;    $param['Review']=constante::Reviewlength;    $param["titredetail"]=constante::titredetail;    $param["option_productpage"]=constante::option_productpage;    return $this->render('product-page.php.twig',$param);        }/** * @Route("/admin/list", name="list") */Public function totallist(PanierService $PanierService){        $iduser= $this->getUser();    $panier=$this-> getDoctrine()    ->getRepository(Panier::class)    ->findBy(array('user'=>$iduser));    $total=$PanierService->total($panier);        //variable commune    $param = [];    $param = constante::variable($param);    $param=constante::variableindex($param);    $param['panier']=$panier;    $param['total']=$total;                $articles= $this->getDoctrine()            ->getRepository(Product::class)            ->customdeletedproduct();            //variable pour la page            $param['articles']=$articles;                        return $this->render('admin/list.html.twig',$param);                                                        }        /**         * @Route("/admin/edit/{id}", name="edit_product")         */                           Public function edit(Request $request,fileUploader $fileUploader,$id, PanierService $PanierService){//requete db pour produit et panier            $iduser= $this->getUser();            $panier=$this-> getDoctrine()            ->getRepository(Panier::class)            ->findBy(array('user'=>$iduser));            $total=$PanierService->total($panier);                        //variable commune            $param = [];            $param = constante::variable($param);            $param=constante::variableindex($param);            $param['panier']=$panier;            $param['total']=$total;                        $Product=$this-> getDoctrine()            ->getRepository(Product::class)            ->findOneBy(array('id' => $id));                                   //creation formulaire            if ( is_null($Product)){                return $this->redirectToRoute('exception');            }            $filename=$Product->getImage()->getLien();            $file=new File($this->getParameter('image_directory').DIRECTORY_SEPARATOR . $filename);            $Product->getImage()->setLien($file);            $form = $this->createForm(ProductType::class, $Product);            $form->handleRequest($request);                                            if ($form->isSubmitted() && $form->isValid()){                $file = $Product->getImage()->getlien();                if ( is_null($file)){                    $Product->getImage()->setLien($filename);                 }                else{                $fileName = $fileUploader->upload($file);                $Product->getImage()->setLien($fileName);                }                $em = $this->getDoctrine()->getManager();                $em->flush();                return $this->redirectToRoute('dashboard');            }            //variable de la page            $param['form']=$form->createView();            $param['image']=$Product->getImage()->getlien()->getfileName();            $param['articles']=$Product;            return $this->render('admin\product_admin1.html.twig',$param);        }        /**         * @Route("/admin/corbeille", name="corbeille")         */                Public function corbeille(PanierService $PanierService){            $iduser= $this->getUser();            $panier=$this-> getDoctrine()            ->getRepository(Panier::class)            ->findBy(array('user'=>$iduser));            $total=$PanierService->total($panier);                        //variable commune            $param = [];            $param = constante::variable($param);            $param=constante::variableindex($param);            $param['panier']=$panier;            $param['total']=$total;                        $articles= $this->getDoctrine()            ->getRepository(Product::class)            ->customcorbeilleproduct();            //variable de la page                        $param['articles']=$articles;            return $this->render('admin/list.html.twig',$param);                                            }        /**         * @Route("/search", name="search")         */        Public function search(PanierService $PanierService){            $iduser= $this->getUser();            $panier=$this-> getDoctrine()            ->getRepository(Panier::class)            ->findBy(array('user'=>$iduser));            $total=$PanierService->total($panier);                        //variable commune            $param = [];            $param = constante::variable($param);            $param=constante::variableindex($param);            $param['panier']=$panier;            $param['total']=$total;                        // valeur de la recherche             $valeur= "%".$_POST['search']."%";                        $articles= $this->getDoctrine()            ->getRepository(Product::class)            ->search($valeur);            //variable de la page                        $param['article']=$articles;                             return $this->render('products.php.twig',$param);}}?>